name: vCenter proxy check

on:
  push:
    branches:
      - e2e-vsphere-management-cluster-trial

jobs:
  vcenter-proxy-check:
    name: vCenter proxy check
    runs-on: ubuntu-18.04
    steps:
      - name: Check out code
        uses: actions/checkout@v1

      - name: vCenter proxy check
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          MANAGEMENT_CLUSTER_VSPHERE_CONTROL_PLANE_ENDPOINT: ${{ secrets.MANAGEMENT_CLUSTER_VSPHERE_CONTROL_PLANE_ENDPOINT }}
          WORKLOAD_CLUSTER_VSPHERE_CONTROL_PLANE_ENDPOINT: ${{ secrets.WORKLOAD_CLUSTER_VSPHERE_CONTROL_PLANE_ENDPOINT }}
          VSPHERE_SERVER: ${{ secrets.VSPHERE_SERVER }}
          VSPHERE_SSH_AUTHORIZED_KEY: ${{ secrets.VSPHERE_SSH_AUTHORIZED_KEY }}
          VSPHERE_USERNAME: ${{ secrets.VSPHERE_USERNAME }}
          VSPHERE_PASSWORD: ${{ secrets.VSPHERE_PASSWORD }}
          VSPHERE_DATACENTER: ${{ secrets.VSPHERE_DATACENTER }}
          VSPHERE_DATASTORE: ${{ secrets.VSPHERE_DATASTORE }}
          VSPHERE_FOLDER: ${{ secrets.VSPHERE_FOLDER }}
          VSPHERE_NETWORK: ${{ secrets.VSPHERE_NETWORK }}
          VSPHERE_RESOURCE_POOL: ${{ secrets.VSPHERE_RESOURCE_POOL }}
          JUMPER_SSH_HOST_IP: ${{ secrets.JUMPER_SSH_HOST_IP }}
          JUMPER_SSH_USERNAME: ${{ secrets.JUMPER_SSH_USERNAME }}
          JUMPER_SSH_PRIVATE_KEY: ${{ secrets.JUMPER_SSH_PRIVATE_KEY }}
          JUMPER_SSH_KNOWN_HOSTS_ENTRY: ${{ secrets.JUMPER_SSH_KNOWN_HOSTS_ENTRY }}
        run: |
          set -x
          set -e

          declare -a required_env_vars=("MANAGEMENT_CLUSTER_VSPHERE_CONTROL_PLANE_ENDPOINT"
          "WORKLOAD_CLUSTER_VSPHERE_CONTROL_PLANE_ENDPOINT"
          "VSPHERE_SERVER"
          "VSPHERE_SSH_AUTHORIZED_KEY"
          "VSPHERE_USERNAME"
          "VSPHERE_PASSWORD"
          "VSPHERE_DATACENTER"
          "VSPHERE_DATASTORE"
          "VSPHERE_FOLDER"
          "VSPHERE_NETWORK"
          "VSPHERE_RESOURCE_POOL"
          "JUMPER_SSH_HOST_IP"
          "JUMPER_SSH_USERNAME"
          "JUMPER_SSH_PRIVATE_KEY"
          "JUMPER_SSH_KNOWN_HOSTS_ENTRY")

          ./test/vsphere/check-required-env-vars.sh "${required_env_vars[@]}"

          trap '{ ./test/vsphere/stop-proxy-to-vcenter-server-and-control-plane.sh; }' EXIT

          export PROXY_CONFIG_NAME="dummy"
          
          ./test/vsphere/run-proxy-to-vcenter-server-and-control-plane.sh "${VSPHERE_SERVER}"/32 "${MANAGEMENT_CLUSTER_VSPHERE_CONTROL_PLANE_ENDPOINT}"/32 "${WORKLOAD_CLUSTER_VSPHERE_CONTROL_PLANE_ENDPOINT}"/32

          curl -I -k https://${VSPHERE_SERVER}/ui

          docker run --rm curlimages/curl curl -I -k https://${VSPHERE_SERVER}/ui || true

          docker run --network bridge --rm curlimages/curl curl -I -k https://${VSPHERE_SERVER}/ui || true

          docker run --network host --rm curlimages/curl curl -I -k https://${VSPHERE_SERVER}/ui || true
